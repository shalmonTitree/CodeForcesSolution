//https://codeforces.com/group/c3FDl9EUi9/contest/262795/problem/F

//bruteforce
//O(n*k)
#include<iostream>
#include<bits/stdc++.h>
typedef long long ll;
using namespace std;
int main()
{
    ll n,q;
    cin>>n>>q;
    vector<ll>v(n);
    for(ll i = 0; i < n; i++)
    {
        cin>>v[i];
    }

    while(q--)
    {
        ll l,r,val;
        cin>>l>>r>>val;

        l-=1;
        r-=1;
        for(ll i = 0; i < n; i++)
        {
            if(i >= l && i <= r)
            {
                v[i]+=val;
            }
        }
    }
    for(int i = 0; i < n; i++)
    {
        cout<<v[i]<<" ";
    }

}

///optimal using differnece array
#include <iostream>
#include <vector>
typedef long long ll;
using namespace std;

int main() {
    ll n, q;
    cin >> n >> q;

    vector<ll> v(n);        // Original array
    vector<ll> diff(n + 1); // Difference array (size n+1 to handle edge cases)

    // Reading the original array
    for (ll i = 0; i < n; i++) {
        cin >> v[i];
    }

    // Process each query
    while (q--) {
        ll l, r, val;
        cin >> l >> r >> val;

        // Adjust 1-indexed l, r to 0-indexed
        l -= 1;
        r -= 1;

        // Apply the difference array technique
        diff[l] += val;     // Add `val` at the start of the range
        if (r + 1 < n) {
            diff[r + 1] -= val; // Subtract `val` after the end of the range
        }
    }

    // Apply the difference array back to the original array
    ll increment = 0; // Tracks the cumulative increment
    for (ll i = 0; i < n; i++) {
        increment += diff[i]; // Add the current difference to the increment
        v[i] += increment;    // Update the original array with the cumulative increment
    }

    // Output the final array
    for (ll i = 0; i < n; i++) {
        cout << v[i] << " ";
    }
    cout << endl;

    return 0;
}
